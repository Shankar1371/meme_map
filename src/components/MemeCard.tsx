import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { 
  X, 
  Share2, 
  MapPin, 
  DollarSign, 
  Shield, 
  Thermometer,
  Copy,
  ToggleLeft,
  ToggleRight
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface MemeCardProps {
  location: {
    name: string;
    zip: string;
    rent: number;
    crime: number;
    weather: number;
  };
  onClose: () => void;
}

const MemeCard = ({ location, onClose }: MemeCardProps) => {
  const [mood, setMood] = useState<'roast' | 'wholesome'>('roast');
  const [showStats, setShowStats] = useState(false);
  const { toast } = useToast();

  const generateMeme = () => {
    const roastMemes = [
      `$${location.rent}/mo to live where even the cockroaches need roommates. Welcome to ${location.name}!`,
      `${location.name}: Where your rent is higher than your hopes and dreams.`,
      `Pay $${location.rent} to hear your neighbor's life story through paper-thin walls. ${location.name} luxury!`,
      `${location.name}: Where the weather is ${location.weather}¬∞F and your bank account is absolute zero.`,
      `Crime rate: ${location.crime}%. Your chances of finding parking: 0%. ${location.name} math!`
    ];

    const wholesomeMemes = [
      `${location.name}: Where community vibes are as warm as the ${location.weather}¬∞F weather! üåü`,
      `${location.name} - Home is where the heart is, and rent is $${location.rent} üíï`,
      `Living in ${location.name}: Where every day is an adventure and neighbors become family!`,
      `${location.name}: Small town vibes, big city dreams, and weather that's just right at ${location.weather}¬∞F!`,
      `${location.name} - Where safety (${location.crime}% crime rate) meets comfort! üè°`
    ];

    const memes = mood === 'roast' ? roastMemes : wholesomeMemes;
    return memes[Math.floor(Math.random() * memes.length)];
  };

  const memeText = generateMeme();

  const handleShare = () => {
    navigator.clipboard.writeText(`${memeText}\n\nGenerated by Meme Map üó∫Ô∏èüòÇ`);
    toast({
      title: "Meme copied!",
      description: "Share the roast with the world üî•",
    });
  };

  const getMoodColor = (currentMood: string) => {
    return currentMood === 'roast' ? 'bg-roast' : 'bg-wholesome';
  };

  return (
    <div className="fixed inset-0 z-50 flex items-end sm:items-center justify-center p-4 bg-background/80 backdrop-blur-sm">
      <Card className="w-full max-w-md bg-gradient-meme border-electric/30 shadow-meme animate-slide-up sm:animate-bounce-in">
        <CardHeader className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <MapPin className="w-5 h-5 text-electric" />
              <CardTitle className="text-lg">{location.name}</CardTitle>
            </div>
            <Button 
              variant="ghost" 
              size="icon" 
              onClick={onClose}
              className="text-muted-foreground hover:text-foreground"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>

          <div className="flex items-center gap-2">
            <Badge variant="outline" className="text-xs">
              ZIP: {location.zip}
            </Badge>
            <Badge 
              variant="outline" 
              className={`text-xs ${getMoodColor(mood)} text-foreground border-transparent`}
            >
              {mood === 'roast' ? 'üî• Roast Mode' : 'üíù Wholesome Mode'}
            </Badge>
          </div>
        </CardHeader>

        <CardContent className="space-y-4">
          {/* Meme Text */}
          <div className="p-4 bg-secondary/50 rounded-lg border border-electric/20">
            <p className="text-sm font-medium leading-relaxed">{memeText}</p>
          </div>

          {/* Mood Toggle */}
          <div className="flex items-center justify-between">
            <span className="text-sm text-muted-foreground">Mood:</span>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setMood(mood === 'roast' ? 'wholesome' : 'roast')}
              className="flex items-center gap-2 hover:bg-electric/10"
            >
              {mood === 'roast' ? (
                <>
                  <ToggleLeft className="w-4 h-4 text-roast" />
                  Switch to Wholesome
                </>
              ) : (
                <>
                  <ToggleRight className="w-4 h-4 text-wholesome" />
                  Switch to Roast
                </>
              )}
            </Button>
          </div>

          {/* Stats Toggle */}
          <div className="flex items-center justify-between">
            <span className="text-sm text-muted-foreground">Show data:</span>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setShowStats(!showStats)}
              className="flex items-center gap-2 hover:bg-cyber/10"
            >
              {showStats ? (
                <ToggleRight className="w-4 h-4 text-cyber" />
              ) : (
                <ToggleLeft className="w-4 h-4" />
              )}
              {showStats ? 'Hide Stats' : 'Show Stats'}
            </Button>
          </div>

          {/* Stats */}
          {showStats && (
            <>
              <Separator className="bg-border" />
              <div className="grid grid-cols-3 gap-4 text-center">
                <div className="space-y-1">
                  <div className="flex items-center justify-center gap-1">
                    <DollarSign className="w-4 h-4 text-cyber" />
                    <span className="text-xs text-muted-foreground">Rent</span>
                  </div>
                  <p className="text-sm font-semibold">${location.rent}</p>
                </div>
                <div className="space-y-1">
                  <div className="flex items-center justify-center gap-1">
                    <Shield className="w-4 h-4 text-electric" />
                    <span className="text-xs text-muted-foreground">Crime</span>
                  </div>
                  <p className="text-sm font-semibold">{location.crime}%</p>
                </div>
                <div className="space-y-1">
                  <div className="flex items-center justify-center gap-1">
                    <Thermometer className="w-4 h-4 text-roast" />
                    <span className="text-xs text-muted-foreground">Weather</span>
                  </div>
                  <p className="text-sm font-semibold">{location.weather}¬∞F</p>
                </div>
              </div>
            </>
          )}

          {/* Share Button */}
          <Button 
            onClick={handleShare}
            className="w-full bg-gradient-electric hover:shadow-glow-electric transition-all duration-300"
          >
            <Share2 className="w-4 h-4 mr-2" />
            Share Meme
          </Button>
        </CardContent>
      </Card>
    </div>
  );
};

export default MemeCard;